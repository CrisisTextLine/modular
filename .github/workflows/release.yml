name: Release
run-name: Release ${{ github.event.inputs.version || github.event.inputs.releaseType }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave blank for auto-increment)'
        required: false
        type: string
      releaseType:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'
  workflow_call:
    inputs:
      version:
        description: 'Version to release (leave blank for auto-increment)'
        required: false
        type: string
      releaseType:
        description: 'Release type'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.25'
          check-latest: true

      - name: Build modcli
        run: |
          cd cmd/modcli
          go build -o modcli

      - name: Determine release version (contract-aware)
        id: version
        run: |
          set -euo pipefail
          INPUT_RELEASE_TYPE='${{ github.event.inputs.releaseType }}'
          INPUT_MANUAL_VERSION='${{ github.event.inputs.version }}'
          echo "Requested releaseType: $INPUT_RELEASE_TYPE"
          if [ -n "$INPUT_MANUAL_VERSION" ]; then
            echo "Manual version provided: $INPUT_MANUAL_VERSION"
          fi

          LATEST_TAG=$(git tag -l "v*" | grep -v "/" | sort -V | tail -n1 || echo "")
            if [ -z "$LATEST_TAG" ]; then
              BASE_VERSION="v0.0.0"; PREV_CONTRACT_REF="";
            else
              BASE_VERSION="$LATEST_TAG"; PREV_CONTRACT_REF="$LATEST_TAG";
            fi
          echo "Latest base version: $BASE_VERSION"

          mkdir -p artifacts/contracts/prev artifacts/contracts/current artifacts/diffs
          if [ -n "$PREV_CONTRACT_REF" ]; then
            TMPDIR=$(mktemp -d)
            git archive $PREV_CONTRACT_REF | tar -x -C "$TMPDIR"
            mkdir -p "$TMPDIR/cmd/modcli" && cp cmd/modcli/modcli "$TMPDIR/cmd/modcli/modcli" || true
            (cd "$TMPDIR" && ./cmd/modcli/modcli contract extract . -o core.json) || echo "Failed to extract previous contract"
            [ -f "$TMPDIR/core.json" ] && mv "$TMPDIR/core.json" artifacts/contracts/prev/core.json
          fi

          ./cmd/modcli/modcli contract extract . -o artifacts/contracts/current/core.json || echo "Failed to extract current contract"

          CHANGE_CLASS="none"
          DIFF_MD_PATH="artifacts/diffs/core.md"
          if [ -f artifacts/contracts/prev/core.json ] && [ -f artifacts/contracts/current/core.json ]; then
            if ./cmd/modcli/modcli contract compare artifacts/contracts/prev/core.json artifacts/contracts/current/core.json -o artifacts/diffs/core.json --format=markdown > "$DIFF_MD_PATH" 2>/dev/null; then
              if [ -s "$DIFF_MD_PATH" ]; then CHANGE_CLASS="minor"; fi
            else
              echo "Breaking changes detected"; CHANGE_CLASS="major"; [ -s "$DIFF_MD_PATH" ] || echo "(Breaking changes; diff unavailable)" > "$DIFF_MD_PATH";
            fi
          else
            if [ -f artifacts/contracts/current/core.json ] && [ $(wc -c < artifacts/contracts/current/core.json) -gt 20 ]; then CHANGE_CLASS="minor"; fi
          fi
          echo "Contract change classification: $CHANGE_CLASS"

          CUR=${BASE_VERSION#v}; MAJOR=${CUR%%.*}; REST=${CUR#*.}; MINOR=${REST%%.*}; PATCH=${CUR##*.}
          if [ -n "$INPUT_MANUAL_VERSION" ]; then V="$INPUT_MANUAL_VERSION"; [[ $V == v* ]] || V="v$V"; NEXT_VERSION="$V"; REASON="manual override"; else
            case "$CHANGE_CLASS" in
              major) NEXT_VERSION="v$((MAJOR + 1)).0.0"; REASON="contract breaking change" ;;
              minor) if [ "$INPUT_RELEASE_TYPE" = "major" ]; then NEXT_VERSION="v$((MAJOR + 1)).0.0"; REASON="user requested major"; else NEXT_VERSION="v${MAJOR}.$((MINOR + 1)).0"; REASON="contract additive change"; fi ;;
              none)  if [ "$INPUT_RELEASE_TYPE" = "major" ]; then NEXT_VERSION="v$((MAJOR + 1)).0.0"; REASON="user requested major (no contract change)"; elif [ "$INPUT_RELEASE_TYPE" = "minor" ]; then NEXT_VERSION="v${MAJOR}.$((MINOR + 1)).0"; REASON="user requested minor (no contract change)"; else NEXT_VERSION="v${MAJOR}.${MINOR}.$((PATCH + 1))"; REASON="patch (no contract change)"; fi ;;
            esac
          fi
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "change_class=$CHANGE_CLASS" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION ($REASON)"

      - name: Run tests
        run: |
          go test -v ./...

      - name: Generate changelog
        id: changelog
        run: |
          TAG=${{ steps.version.outputs.next_version }}
          CHANGE_CLASS=${{ steps.version.outputs.change_class }}
          PREV_TAG=$(git tag -l "v*" | grep -v "/" | sort -V | tail -n2 | head -n1 || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" -- . ':!modules')
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD -- . ':!modules')
          fi
          [ -n "$CHANGELOG" ] || CHANGELOG="- No specific changes to the main library since last release"
          {
            echo "# Release ${TAG}"; echo; echo "## Changes"; echo; echo "$CHANGELOG"; echo; echo "## API Contract Changes"; echo;
            if [ -f artifacts/diffs/core.md ] && [ -s artifacts/diffs/core.md ]; then
              case "$CHANGE_CLASS" in
                major) echo "⚠️ Breaking changes detected (major bump)."; echo ;;
                minor) echo "✅ Additive, backward-compatible changes (minor bump)."; echo ;;
                none) echo "ℹ️ No public API surface changes detected."; echo ;;
              esac
              cat artifacts/diffs/core.md
              # Also embed the raw JSON diff for direct inspection
              if [ -f artifacts/diffs/core.json ] && [ -s artifacts/diffs/core.json ]; then
                echo
                echo "### Raw Contract JSON Diff"
                echo
                echo '```json'
                if command -v jq >/dev/null 2>&1; then jq . artifacts/diffs/core.json || cat artifacts/diffs/core.json; else cat artifacts/diffs/core.json; fi
                echo '```'
              fi
            else
              echo "No API contract differences compared to previous release."
            fi
          } > changelog.md
          CHANGELOG_ESCAPED=$(jq -Rs . < changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        run: |
          set -euo pipefail
          RELEASE_TAG=${{ steps.version.outputs.next_version }}
          gh release create "$RELEASE_TAG" \
            --title "Modular $RELEASE_TAG" \
            --notes-file changelog.md \
            --repo ${{ github.repository }} \
            --latest
          # Capture HTML URL (gh release view returns web URL in .url field)
          RELEASE_URL=$(gh release view "$RELEASE_TAG" --json url --jq .url)
          echo "html_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "Release created: $RELEASE_URL"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Announce to Go proxy
        run: |
          VERSION=${{ steps.version.outputs.next_version }}
          MODULE_NAME="github.com/CrisisTextLine/modular"
          GOPROXY=proxy.golang.org go list -m ${MODULE_NAME}@${VERSION}
          echo "Announced version ${VERSION} to Go proxy"

